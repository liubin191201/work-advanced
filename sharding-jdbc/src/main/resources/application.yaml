

mybatis:
  mapper-locations: classpath*:mapper/**/*.xml
spring:
  shardingsphere:
    # 将运行模式配置为Standalone单机模式（Cluster：集群模式）
    mode:
      repository:
        type: JDBC
      type: Standalone

      #配置多个数据源
    datasource:
      names: ds0,ds1
      #配置第一个数据源
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/db_sharding_01?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true&useSSL=false
        username: root
        password: root
      #配置第二个数据源
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/db_sharding_02?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true&useSSL=false
        username: root
        password: root
   #属性设置
    props:
      sql-show: true

    #分片规则
    rules:
      sharding:
        # 配置所有分片表
        tables:
          #配置订单表的分片策略
          order_main:
            #声明配置节点
            actual-data-nodes: ds$->{0..1}.order_main

            #设置主键生成策略
            key-generate-strategy:
              #主键字段
              column: order_id
              #指定雪花算法名称
              key_generator_name: global-id-snowflake

            #配置分库策略
            databaseStrategy:
              standard:
                #采用内置取模算法
                shardingColumn: order_id
                shardingAlgorithmName: key-int-mod

          #配置订单详情分片策略
          order_info:
            #声明配置节点
            actual-data-nodes: ds$->{0..1}.order_info

            #设置主键生成策略
            key-generate-strategy:
              #主键字段
              column: order_info_id
              #指定雪花算法名称
              key_generator_name: global-id-snowflake

            #配置分库策略
            databaseStrategy:
              standard:
                #采用内置取模算法
                shardingColumn: order_id
                shardingAlgorithmName: key-int-mod

          #配置用户详情
          user_info:
            #声明数据节点
            actualDataNodes: ds$->{0..1}.user_info
            #指定主键生成策略
            key-generate-strategy:
              #主键字段
              column: user_id
              #指定雪花算法名称
              key_generator_name: global-id-snowflake


          # 首先配置商品表的分片策略
          shoping:
            # 声明商品表所在的真实数据节点
            actual-data-nodes: ds$->{0..1}.shoping_0$->{0..1}

            #配置shoping表的主键生成策略
            key-generate-strategy:
              #声明主键为shoping_id
              column: shoping_id
              # 同样指向global-id-snowflake这个具体的主键生成策略
              keygenerator-name: global-id-snowflake

            # 配置分库规则
            database-strategy:
              standard:
                # 配置路由键为shoping_id（数据库中的列名）
                sharding-column: shoping_id
                # 配置分片算法（需要配置一个名词，通过别名指向具体的策略）
                sharding-algorithm-name:  db-inline-mod

            #配置分表规则
            table-strategy:
              standard:
                # 配置路由键为shoping_name（数据库中的列名）
                sharding-column: shoping_id
                # 配置分片算法（需要配置一个名词，通过别名指向具体的策略）
                sharding-algorithm-name:  shop-standard-sharding

        sharding-algorithms:
          # 配置前面的分库算法
          db-inline-mod:
            # 声明是 INLINE 简单类型的分片
            type: INLINE
            props:
              # 选择对shoping_id做取模运算
              algorithm-expression: ds$->{shoping_id % 2}

          key-hash-mod:
            type: HASH_MOD
            props:
              # 声明分表的节点数量
              sharding-count: 2

          key-int-mod:
            type: MOD
            props:
              sharding-count: 2

          # 配置一个自定义的Standard分片算法
          shop-standard-sharding:
            # 声明使用自定义的算法实现类
            type: CLASS_BASED
            props:
              # 声明分片策略
              strategy: STANDARD
              # 指明算法实现类（配置全限定名）
              algorithmClassName: com.example.shardingjdbc.shardingAlgorithm.ShopStarndSA







        #主键生成策略
        key-generators:
          # 配置上面的主键生成策略
          global-id-snowflake:
            # 选择使用内置的雪花算法
            type: SNOWFLAKE
            props:
              # 分配一个工作节点ID（要确保全局唯一）
              worker-id: 111

        #这里配置绑定表关系
        binding-tables:
          # 配置第一组绑定表的关系（订单表、订单详情表）
          - order_main,order_info
        #设置广播表
        broadcastTables:
          - user_info





